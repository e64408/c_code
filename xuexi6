#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<math.h>
#include<string.h>
typedef struct stu
{
	//成员变量
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
void print1(Stu tmp)
{
	printf("name:%s\n", tmp.name);
	printf("age:%d\n", tmp.age);
	printf("tele:%s\n", tmp.tele);
	printf("sex:%s\n", tmp.sex);
} 
void print2(Stu* ps)
{
	printf("name:%s\n", ps->name);
	printf("age:%d\n", ps->age);
	printf("tele:%s\n", ps->tele);
	printf("sex:%s\n", ps->sex);
}
int main()
{
	Stu s = {"李四",40,"12141415125","男"};
	print1(s);
	print2(&s);

	return 0;
}
//struct 结构体关键字 stu-结构体标签   struct stu---结构体类型
//typedef struct stu
//{
//	//成员变量
//	char name[20];
//	short age;
//	char tele[12];
//	char sex[5];
//}stu;             //s1, s2, s3;//是三个全局的结构体变量
//int main()
//{ 
//	struct stu s;//局部变量
//	stu s2;
//	return 0;
//
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int* arr[3] = {&a,&b,&c};
//	int i = 0;
//	
//	for (i = 0; i < 3; i++)
//	{
//		printf("%d  \n",*(arr[i]));
//	}
//
//	return 0;
//}
//int a=10;
// int* pa=&a
// *pa=20;
// 初级指针
// 
// 
// 
//int my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//
//	}
//	return end - str;
//}
//int main()
//{
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n",len);
//	return 0;
//}
 //整型数组-存放整型
 // 字符数组-存放字符
 // 指针数组-存放指针
//int main()
//{
//	int a = 10;
//	int* pa = &a;//初始化
//	int* p = NULL;//用来初始化指针的，给指针赋值
//	return 0;
//}
//int main()
//{
//	int a[] = { 5,15,34,54,14,2,52,72 };
//	int* p = &a[5];
//	printf("%d\n", p[-2]);
//	
//	
	/*
	int a = 0x11223344;
	int* pa = &a;
	char* pc = &a;
	*pa = 0;
	printf("%p\n",pa);
	printf("%p\n", pc);*/
	//指针类型决定了指针进行解引用操作的时候，
	//能够访问空间的大小
	//int*p;*p能够访问4个字节
	//char*p;*p能够访问1个字节
	//double*p;*p能够访问8个字节
	
	
	
	
	
	/*
	int sum = 0;
	int i = 0;
	for (i = 1; i < 10; i++)
	{
		int j = 0;
		for (j = 1; j < 10; j++)
		{
			sum = i * j;
			printf("%d*%d= %d ",i,j,sum);
		}
		printf("\n");
	}*/
	//return 0;
//}
//int main()
//{
//	int a = 10;
//	int *p = &a;//指针变量
//	printf("d",*p);
//	return 0;
//}
//struct stu
//{//成员变量
//	char name[20];
//	int age;
//	char id[20];
//};
//int main()
//{
//	int a = 10;
//	
//	//使用struct stu这个类型创建了一个学生对象s1，并初始化
//	struct stu s1 = { "张三",20,"20190305" };
//	
//	struct stu* ps = &s1;
//	printf("%s\n",ps->name);
//	printf("%s\n", (*ps).name);
//	printf("%d\n", (*ps).age);
//	//printf("%s\n", (*ps).id);
//	return 0;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = 0;
//	max = (a > b ? a : b);
//	printf("max=%d ",max);
//	return 0;
//}
//int main()
//{
//	int a = (int)3.14;//强制转换型式加括号
//	printf("%d",a);
//	return 0;
//}
//与逻辑符号左边为假右边都不算了
// 或逻辑符号左边为真右边就不算了
//int main()
//{
//	int num = 0;
//
//	int count = 0;
//	scanf("%d",&num);
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (1 == ((num >> i) & 1))
//			count++;
//
//	}
//	//32bit
//
//	//统计num的补码有多少个1
//	/*while (num)
//	{
//		if (num % 2 == 1)
//			count++;
//		num = num / 2;
//	}*/
//	printf("%d\n",count);
//	return 0;
//}
//int main()
//{
//	int a = 11230;
//	int b = 212310;
//	int tmp = 0;
//	printf("before:a=%d, b=%d\n", a, b);
//	//加减法
//	/*a = a + b;
//	b = a - b;
//	a = a - b;*/
//	//异或的方法
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("after:a=%d, b=%d\n",a,b);
//
//	return 0; 
//}
//int main()
//{
//	int a = 16;
//	//>>--右移操作符
//	//移动的是二进制位
//	//00000000000000000000000000010000
//	//1.算术右移（基本上都是这种）
//	//右边丢弃，左边补原符号位    0为正    1为负
//	//2.逻辑右移
//	//右边丢弃，左边补零
//	//-1的存储的
//	//10000000000000000000000000000001    原码
//	//11111111111111111111111111111110    反码
//	//11111111111111111111111111111111    补码
//	int b=a >> 1;
//	printf("a=%d\n",b);
//
//	return 0;
//}
//int main()
//{
//	double a = 5 % 2;//商2余1
//	printf("a=%lf\n",a);
//	return 0;
//}
//void bubble_sort(int arr[],int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		int flag = 1;//假设这一趟要排的数据已经有序
//		int j = 0;//每一趟冒泡排序
//		for (j = 0; j <sz-1-i ; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				flag = 0;//本趟排序的数据其实不完全有序
//			}
//		} 
//		if (flag == 1)
//		{
//			break;
//		}
//
//	}
//	
//
//}
//int main()
//{
//	int arr[] = {0,1,2,3,4,5,6,7,8,9 };
//	
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//数组名就是首元素地址
//	// 有两个例外1.sizeof（数组名）--数组名表示整个数组，
//	// sizeof（数组名）计算的是整个数组的大小单位是字节
//	// 2.&数组名，数组名代表整个数组，
//	// &数组名，取出的是整个数组的地址
//	//arr进行排序，排成升序
//	bubble_sort(arr,sz);
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
